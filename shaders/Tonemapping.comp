#version 460
#extension GL_GOOGLE_include_directive : require
#extension  GL_EXT_shader_explicit_arithmetic_types_int64 : require

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0,rgba32f) uniform image2D colorHistory;
layout(set = 0, binding = 1,rgba16f) uniform image2D outputImage;

#include "common/host_device.h"

//push constants block
layout( push_constant ) uniform _ToneMapping { ToneMappingSettings tone; };


// Input color is non-negative and resides in the Linear Rec. 709 color space.
// Output color is also Linear Rec. 709, but in the [0, 1] range.

vec3 PBRNeutralToneMapping( vec3 color ) {
  const float startCompression = 0.8 - 0.04;
  const float desaturation = 0.15;

  float x = min(color.r, min(color.g, color.b));
  float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
  color -= offset;

  float peak = max(color.r, max(color.g, color.b));
  if (peak < startCompression) return color;

  const float d = 1. - startCompression;
  float newPeak = 1. - d * d / (peak + d - startCompression);
  color *= newPeak / peak;

  float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
  return mix(color, newPeak * vec3(1, 1, 1), g);
}


vec3 gammaCorrect( vec3 color, float gamma ) {
  return pow(color, vec3(1.0 / gamma));
}

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);



    vec3 currentColor = imageLoad(colorHistory, texelCoord).xyz;

    vec3 tonemappedColor = PBRNeutralToneMapping(currentColor);

    vec3 gammaCorrectedColor = gammaCorrect(tonemappedColor, tone.gamma);

    imageStore(outputImage, texelCoord, vec4(gammaCorrectedColor, 1.0));

}