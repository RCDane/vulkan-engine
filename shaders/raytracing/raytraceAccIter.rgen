#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
// #extension GL_EXT_nonuniform_qualifier : require  
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_buffer_reference2 : require
#include "../common/host_device.h"
#include "../common/PBR_functions.glsl"
#include "../common/util.glsl" 

// clang-format off
layout(location = 0) rayPayloadEXT hitPayload prd;
layout(location = 1) rayPayloadEXT bool isShadowed;

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage, rgba16f) uniform image2D image;
layout(set = 1, binding = 0) uniform _GlobalUniforms { GlobalUniforms uni; };

layout(set = 2, binding = 0, rgba16f) readonly uniform image2D albedo; 
layout(set = 2, binding = 1, rgba16f) readonly uniform image2D normal; 
layout(set = 2, binding = 2, r11f_g11f_b10f) readonly uniform image2D material;
layout(set = 2, binding = 3, rgba32f) readonly uniform image2D emission; 
layout(set = 2, binding = 4, r32f) readonly uniform image2D depth; 
layout(set = 2, binding = 5, rgba16f) uniform image2D colorHistory; 
layout(set = 2, binding = 6, r32f) readonly uniform image2D depthHistory;
layout(set = 3, binding = 0, std430) readonly buffer LightSources {LightSource l[]; } lights;

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };







LightSample sampleLightsPdf(vec3 hitPoint, inout uint seed,  int lightCount) { 
    // 1) Pick one light uniformly 
    uint i = randRange(seed, 0, lightCount - 1);

    LightSource Ls = lights.l[i];

    LightSample s = ProcessLight(hitPoint, seed, Ls); // Sample the light source
    // s.pdf /= lightCount ; // Scale the pdf by the light source pdf 
    return s; 
}



bool CheckUv(vec2 uv, vec2 size){
  if(uv.x < 0.0 || uv.x > size.x) return false;
  if(uv.y < 0.0 || uv.y > size.y) return false;
  return true;
}

float eps = 1e-4;

bool CheckAgainstDepth(vec2 uv, vec2 size,float calculatedDepth, image2D oldDepth ){
  bool uvInBounds = CheckUv(uv, size);
  if(!uvInBounds) return false;
  float depth = imageLoad(oldDepth, ivec2(uv)).r;
  if (abs(depth - calculatedDepth) < eps)
    return true;
  return false;
}

vec3 sampleGGXDirection(
    in vec3 N,
    in vec3 V,
    in float roughness,
    in vec3 T,
    in vec3 B,
    inout uint seed,
    out float pdf_out
) {
    if (roughness < 0.001) {
      pdf_out = 1.0; // For perfect reflections, PDF is a delta function
      return reflect(-V, N); // Perfect mirror reflection
    }

    // 2) Otherwise clamp and do regular GGX sampling
    float a = max(roughness, 1e-2);
    float u1 = rnd(seed), u2 = rnd(seed);

    float phi  = 2.0 * PI * u1;
    float cos0 = sqrt( (1.0 - u2) / (1.0 + (a*a - 1.0) * u2) );
    float sin0 = sqrt(max(0.0, 1.0 - cos0*cos0)); 

    vec3 Ht = vec3(cos(phi)*sin0, sin(phi)*sin0, cos0);
    vec3 H  = normalize(T * Ht.x + B * Ht.y + N * Ht.z);

    vec3 L = reflect(-V, H);

    // 3) Compute PDF safely
    float D     = DistributionGGX(N, H, roughness);
    float NdotH = max(dot(N, H), 0.0);
    float VdotH = max(dot(V, H), 1e-6); // avoid zero
    pdf_out = (D * NdotH) / (4.0 * VdotH); 

    return L;
}

void main()
{
  
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0; 
  vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);   

  vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

  double currentDepth = imageLoad(depth, ivec2(gl_LaunchIDEXT.xy)).r;
  if (currentDepth == 0.0) {
    imageStore(colorHistory, ivec2(gl_LaunchIDEXT.xy), vec4(0.0, 0.0, 0.0, 1.0));
    return; // If there is no depth, then nothing has been rendered here.
  }
  vec3 N =        oct_to_ndir_unorm(imageLoad(normal, ivec2(gl_LaunchIDEXT.xy)).xy);
  vec4 material = imageLoad(material, ivec2(gl_LaunchIDEXT.xy));
  vec4 albedoColor = imageLoad(albedo, ivec2(gl_LaunchIDEXT.xy));
  vec4 emission =        imageLoad(emission, ivec2(gl_LaunchIDEXT.xy));

  vec2 vpSize      = vec2(gl_LaunchSizeEXT.xy);  
  dvec3 worldPos = reconstructWorldPosition(
    currentDepth, 
    pixelCenter, 
    vpSize, 
    uni.projInverse, 
    uni.viewInverse);

 

  float roughness = material.r;
  float metalness = material.g;
  prd.seed = tea(gl_LaunchIDEXT.x* gl_LaunchIDEXT.y +gl_LaunchIDEXT.x , gl_LaunchIDEXT.x* gl_LaunchIDEXT.y *uint(clockARB()));
  uint seed = tea(gl_LaunchIDEXT.x* gl_LaunchIDEXT.y +gl_LaunchIDEXT.x , uint(clockARB()));
  // uint seed = 0;
  // prd.seed = uni.raytracingSettings.seed;


  // direction = -direction;
  vec3 V = normalize(origin.xyz- vec3(worldPos));
  LightSample Ls = sampleLightsPdf(vec3(worldPos), seed, uni.raytracingSettings.lightCount);
  

  float light_pdf = Ls.pdf; // pdf of the light sample


  int rayDepth = 0;
	prd.depth = 0;
	vec3 tangent, bitangent; 
  float e = 1e-2;

  prd.rayOrigin = vec3(worldPos);
  prd.rayDir = -direction.xyz;
  prd.normal = N;
  prd.attenuation = vec3(1.0);
  vec3 F0 = mix(vec3(0.04), albedoColor.xyz, metalness);
	vec3 rayOrigin = prd.rayOrigin;
	vec3 hitNormal = prd.normal;
  createCoordinateSystem(hitNormal, tangent, bitangent);

	// vec3 rayDirection = samplingHemisphere(prd.seed, tangent, bitangent, hitNormal);
  float pdf = 0.0;
  vec3 rayDirection = sampleGGXDirection(
      hitNormal,
      V,
      roughness,
      tangent,
      bitangent,
      seed,
      pdf
  );
  vec3 indirectIllumination = vec3(0);

	float tMin   = e;
	float tMax   = 10000000.0;
	vec3  rayDir = rayDirection;
	uint  flags  = gl_RayFlagsNoneEXT;
	prd.depth += 1;
	prd.rayDir = rayDirection;
  prd.hitValue = vec3(0);
	traceRayEXT(topLevelAS,  // acceleration structure
						flags,       // rayFlags
						0xFF,        // cullMask
						0,           // sbtRecordOffset 
						0,           // sbtRecordStride
						0,           // missIndex
						rayOrigin,      // ray origin
						tMin,        // ray min range
						rayDirection,      // ray direction
						tMax,        // ray max range
						0            // payload is payload
	);
  // float cosNL    = max(dot(N, rayDirection), 0.0);
  // float hemiPdf  = cosNL / PI;
  // float invPdf   = PI / max(cosNL, 1e-6);
  float invPdf = 1.0 / pdf;

  PBR_result result = CalculatePBRResult(
    N,V, 
    rayDirection, albedoColor.xyz, 
    prd.hitValue, 1.0f, 
    F0, metalness,  
    roughness);
    


	indirectIllumination += result.color * invPdf;


  // Next event estimation for direct lighting
  vec3 directIllumination = vec3(0.0); 

  vec3 L = normalize(Ls.direction); 
  isShadowed   = true; 

    if(dot(N, L) > 0) 
    {
      
      tMin   = 0.01;
      tMax   = Ls.distance; 
      rayOrigin = vec3(worldPos); // offset the ray origin to avoid self-intersection
      rayDir = L; 
      flags  = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
      traceRayEXT(topLevelAS,  // acceleration structure
            flags,       // rayFlags
            0xFF,        // cullMask
            0,           // sbtRecordOffsetw 
            0,           // sbtRecordStride
            1,           // missIndex
            rayOrigin,      // ray origin
            tMin,        // ray min range
            Ls.direction,      // ray direction
            tMax,        // ray max range
            1            // payload is isShadowed
      );
 
      
    }
    if (!isShadowed) { 
        PBR_result res =  CalculatePBRResult(N,V,L,albedoColor.xyz, Ls.color, float(Ls.intensity), F0, metalness, roughness);
        directIllumination += ((res.color * Ls.attenuation)) / Ls.pdf; // divide by the pdf of the light sample

      }   
  vec3 combined = indirectIllumination+  directIllumination ; // combine direct and indirect illumination

  float currentRayCount =  float(uni.raytracingSettings.currentRayCount);
  float rayBudget =  float(uni.raytracingSettings.rayBudget); 
  float invNext = rayBudget / (currentRayCount + rayBudget);  

 
  vec3 currentColor = imageLoad(colorHistory, ivec2(gl_LaunchIDEXT.xy)).rgb; 


  vec3 accumulatedColor = currentColor.rgb 
                        + (combined - currentColor.rgb) * invNext;



  vec3 outColor = combined;
  if (pcRay.useAccumulation == 1) {
    outColor = accumulatedColor;
  }

  imageStore(colorHistory,
            ivec2(gl_LaunchIDEXT.xy),
            vec4(outColor,1.0)); // store the color in the history buffer

}
