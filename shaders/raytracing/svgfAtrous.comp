#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#include "../common/PBR_functions.glsl"

#include "../input_structures.glsl"
#include "../common/host_device.h"
#include "../common/util.glsl"

layout (local_size_x = 16, local_size_y = 16) in;


layout(set = 0, binding = 0, rgba16f) uniform image2D illuminationTexture;
layout(set = 0, binding = 1, r8ui) uniform uimage2D prevHistoryLengthImage;
layout(set = 0, binding = 2, rgba16f) uniform image2D NormalFWidthZWidth;
layout(set = 0, binding = 3, rgba16f) uniform image2D albedoTexture;
layout(set = 0, binding = 4) uniform sampler2D  depthTexture;
layout(set = 0, binding = 5, rgba16f) uniform image2D outIllumination;
layout(set = 0, binding = 6, rgba32f) uniform image2D color;


struct PushConstantAtrous {
    ivec2 imageSize;
    int stepSize;
    float phiColor;
    float phiNormal;
};
float computeVarianceCenter(ivec2 ipos)
{
    float sum = 0.f;

    const float kernel[2][2] = {
        { 1.0 / 4.0, 1.0 / 8.0 },
        { 1.0 / 8.0, 1.0 / 16.0 },
    };

    const int radius = 1;
    for (int yy = -radius; yy <= radius; yy++)
    {
        for (int xx = -radius; xx <= radius; xx++)
        {
            const ivec2 p = ipos + ivec2(xx, yy);
            const float k = kernel[abs(xx)][abs(yy)];
            sum += imageLoad(illuminationTexture, p).a * k;
        }
    }

    return sum;
}

layout(push_constant ) uniform PushConstant { PushConstantAtrous pc; } PC;

void main(){
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    
    const ivec2 screenSize = PC.pc.imageSize;

    const float epsV = 1e-10;
    const float kernelWeights[3] = { 1.0, 2.0 / 3.0, 1.0 / 6.0 };

    const vec4 illuminationCenter = imageLoad(illuminationTexture, coord);
    const float lIlluminationCenter = luminance(illuminationCenter.rgb);

    const float variance = computeVarianceCenter(coord);

    const float historyLength = float(imageLoad(prevHistoryLengthImage, coord).x);
    const float depth = float(LinearizeDepth(texture(depthTexture, coord).x));
    const float zWidth = imageLoad(NormalFWidthZWidth, coord).w;
    if (depth < 0.0){
        imageStore(outIllumination, coord, illuminationCenter);
        return;
    }

    const vec4 normalFZwidth = imageLoad(NormalFWidthZWidth, coord);

    const vec3 normalCenter = oct_to_ndir_unorm(normalFZwidth.xy);


    const float phiLIllumination = PC.pc.phiColor * sqrt(max(0.0, epsV + variance));
    const float phiDepth = max(depth, 1e-8) * PC.pc.stepSize;

    float sumWIllumination = 1.0;
    vec4 sumIllumination = illuminationCenter;


    for (int yy = -2; yy <= 2; yy++)
    {
        for (int xx = -2; xx <= 2; xx++)
        {
            const ivec2 p = coord + ivec2(xx, yy) * PC.pc.stepSize;
            const bool inside = isInsideScreen(p, screenSize);

            const float kernel = kernelWeights[abs(xx)] * kernelWeights[abs(yy)];

            if (inside && (xx != 0 || yy != 0)) // ignore center
            {
                const vec4 illuminationP = imageLoad(illuminationTexture, p);
                const float lIlluminationP = luminance(illuminationP.rgb);
                const float zP =  float(LinearizeDepth(texture(depthTexture, p).x));
                const vec4 n = imageLoad(NormalFWidthZWidth, p);
                const vec3 nP = oct_to_ndir_unorm(n.xy);

                // compute the edge-stopping functions
                const float w = computeWeight(
                    depth,
                    zP,
                    phiDepth * length(vec2(xx, yy)),
                    normalCenter,
                    nP,
                    PC.pc.phiNormal,
                    lIlluminationCenter,
                    lIlluminationP,
                    phiLIllumination
                );

                const float wIllumination = w * kernel;

                // alpha channel contains the variance, therefore the weights need to be squared, see paper for the formula
                sumWIllumination += wIllumination;
                sumIllumination += vec4(wIllumination.xxx, wIllumination * wIllumination) * illuminationP;
            }
        }
    }

    // renormalization is different for variance, check paper for the formula
    vec4 filteredIllumination = vec4(sumIllumination / vec4(sumWIllumination.xxx, sumWIllumination * sumWIllumination));

    imageStore(outIllumination, coord, filteredIllumination);
    // imageStore(color, coord, filteredIllumination);
}