#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_NV_compute_shader_derivatives : require

#include "../common/PBR_functions.glsl"

#include "../input_structures.glsl"
#include "../common/host_device.h"
#include "../common/util.glsl"

layout(set = 0, binding = 0, rgba32f) uniform image2D packedNormalDepth;
layout(set = 0, binding = 1, rgba16f) uniform image2D NormalFWidthZWidth;

layout(set = 0, binding = 2) uniform sampler2D  depth;

layout (local_size_x = 16, local_size_y = 16) in;
layout(derivative_group_quadsNV) in;


float manualFwidth(sampler2D depth, ivec2 coord) {
    float center = float(LinearizeDepth(texelFetch(depth, coord, 0).r));
    float right  = float(LinearizeDepth(texelFetch(depth, coord + ivec2(1, 0), 0).r));
    float left   = float(LinearizeDepth(texelFetch(depth, coord + ivec2(-1, 0), 0).r));
    float up     = float(LinearizeDepth(texelFetch(depth, coord + ivec2(0, 1), 0).r));
    float down   = float(LinearizeDepth(texelFetch(depth, coord + ivec2(0, -1), 0).r));

    float dx = abs(right - left) * 0.5;
    float dy = abs(up - down) * 0.5;
    return dy + dx;
}
void main(){
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec4 normalFwidthZwidth = imageLoad(NormalFWidthZWidth, pixelCoord);
    vec2 packedNormal = normalFwidthZwidth.xy;
    float depthFwidth = normalFwidthZwidth.w;

    float nonLinearDepth = texelFetch(depth, pixelCoord, 0).r;
    // linearDepth = linearDepth * 100.0;
    // linearDepth = linearDepth / 100.0;

    float f =  manualFwidth(depth, pixelCoord);

    highp vec4 packed = vec4(nonLinearDepth, f, packedNormal.x, packedNormal.y);
    imageStore(packedNormalDepth, pixelCoord, packed);
}