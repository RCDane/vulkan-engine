

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require


#include "../common/host_device.h"
#include "../common/PBR_functions.glsl"
// clang-format off
layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage, rgba32f) uniform image2D image;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(set = 2, binding = 0, rgba32f) uniform image2D albedo; 

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on
uint tea(uint val0, uint val1)
{
  uint v0 = val0;
  uint v1 = val1;
  uint s0 = 0;

  for(uint n = 0; n < 16; n++)
  {
    s0 += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
  }

  return v0;
}

void main()
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;
  vec4 currentColor = SRGBtoLINEAR(imageLoad(image, ivec2(gl_LaunchIDEXT.xy)));
  vec4 currentAlbedo = SRGBtoLINEAR(imageLoad(albedo, ivec2(gl_LaunchIDEXT.xy)));

  if (uni.clearScreen == 1){
    currentColor = vec4(0);
  }
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), currentAlbedo);
  return;

  dvec3 finalColor = dvec3(0);
  vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);
  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.001;
  float tMax     = 10000.0;
  prd.depth       = 0;
  prd.hitValue    = vec3(0);
  prd.attenuation = vec3(1.f, 1.f, 1.f);
  prd.done        = 1;
  prd.rayOrigin   = origin.xyz;
  prd.rayDir      = direction.xyz;
  prd.currentIoR  = 1.0;
  prd.rayBudget = uni.raytracingSettings.rayBudget;
  prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(uni.raytracingSettings.seed));;
  traceRayEXT(topLevelAS,     // acceleration structure
              rayFlags,       // rayFlags
              0xFF,           // cullMask
              0,              // sbtRecordOffset
              0,              // sbtRecordStride
              0,              // missIndex
              origin.xyz,     // ray origin
              tMin,           // ray min range
              direction.xyz,  // ray direction
              tMax,           // ray max range
              0               // payload (location = 0)
  );

  vec3 currentRayCount =  vec3(uni.raytracingSettings.currentRayCount);
  vec3 rayBudget =  vec3(uni.raytracingSettings.rayBudget);
  vec3 accumelatedColor = 
    ((currentColor.rgb * currentRayCount) 
    + (prd.hitValue.rgb * rayBudget))
    / (currentRayCount + rayBudget);

  vec3 gammaCorrectedColor = LINEARtoSRGB(accumelatedColor);
  

  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(gammaCorrectedColor, 1.0));
  // imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue.rgb, 1.0));
}
