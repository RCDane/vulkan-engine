#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#include "../common/PBR_functions.glsl"

#include "../input_structures.glsl"
#include "../common/host_device.h"
#include "../common/util.glsl"

layout(set = 0, binding = 0, rgba16f) uniform image2D illuminationTexture;
layout(set = 0, binding = 1, r8ui) uniform uimage2D prevHistoryLengthImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D packedNormalDepth;
layout(set = 0, binding = 3, rg16f) uniform image2D Moments;
layout(set = 0, binding = 4, rgba32f) uniform image2D color;


 
layout (local_size_x = 16, local_size_y = 16) in;

float gPhiColor = 0.2;
float gPhiNormal = 0.2;


layout(push_constant ) uniform PushConstant { PushConstantImageSize pc; } PC;

void main(){
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    uint h = imageLoad(prevHistoryLengthImage, coord).x;
    ivec2 screenSize = PC.pc.imageSize;
    
    if (h < 4.0){
        float sumWIllumination = 0.0;
        vec3 sumIllumination = vec3(0.0, 0.0, 0.0);
        vec2 sumMoments = vec2(0.0, 0.0);

        const vec4 illuminationCenter = imageLoad(illuminationTexture, coord);
        const float lIlluminationCenter = luminance(illuminationCenter.rgb);

        const vec4 normalFZwidth = imageLoad(packedNormalDepth, coord);
        
        float depth = normalFZwidth.x;
        float zWidth = normalFZwidth.y;

        if (depth < 0.0){
            return;
        }

        const vec3 normalCenter = oct_to_ndir_unorm(normalFZwidth.zw);
        const float phiDepth = float(max(LinearizeDepth(depth), 1e-8)*3.0);

        const int radius = 3;
        for (int yy = -radius; yy <= radius; yy++)
        {
            for (int xx = -radius; xx <= radius; xx++)
            {
                const ivec2 p = coord + ivec2(xx, yy);
                const bool inside = isInsideScreen(p, screenSize);
                const bool samePixel = (xx == 0 && yy == 0);
                const float kernel = 1.0;

                if (inside)
                {
                    const vec3 illuminationP = imageLoad(illuminationTexture, p).rgb;
                    const vec2 momentsP = imageLoad(Moments, p).xy;
                    const float lIlluminationP = luminance(illuminationP.rgb);
                    const vec4 packedNormal = imageLoad(packedNormalDepth, p);
                    const float zP = packedNormal.x;
                    const vec3 nP = oct_to_ndir_unorm(packedNormal.zw);

                    const float w = computeWeight(
                        depth,
                        zP,
                        phiDepth * length(vec2(xx, yy)),
                        normalCenter,
                        nP,
                        gPhiNormal,
                        lIlluminationCenter,
                        lIlluminationP,
                        gPhiColor
                    );

                    sumWIllumination += w;
                    sumIllumination += illuminationP * w;
                    sumMoments += momentsP * w;
                }
            } 
        }

        sumWIllumination = max(sumWIllumination, 1e-6f);

        sumIllumination /= sumWIllumination;
        sumMoments /= sumWIllumination;

        // compute variance using the first and second moments
        float variance = sumMoments.g - sumMoments.r * sumMoments.r;

        // give the variance a boost for the first frames
        variance *= 4.0 / h;

        imageStore(illuminationTexture, coord, vec4(sumIllumination, variance.r));
    }
    


}